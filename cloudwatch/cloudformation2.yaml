Resources:
  awstraininghxyeventRule:
    Type: AWS::Events::Rule
    Properties:
      Description: invoke lambda
      State: ENABLED
      ScheduleExpression: rate(1 minute)
      Targets:
        - Arn:
            Fn::GetAtt:
              - logLambda
              - Arn
          Input: '{"operation":"call-lambda"}'
          Id: logLambda

  cloudwatchLogPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref logLambda
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn:
        Fn::GetAtt:
          - awstraininghxyeventRule
          - Arn

  SNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
        - Endpoint: "xingyang.han@thoughtworks.com"
          Protocol: email
      
  LogMetricsFilter:
    Type: AWS::Logs::MetricFilter
    Properties:
      FilterPattern: 'log message'
      LogGroupName: !Ref SendLog
      MetricTransformations:
        - MetricValue: "1"
          MetricNamespace: aws-training-hxy
          MetricName: logs

  SendLogG:
    Type: AWS::Logs::LogGroup
    DependsOn: logLambda
    DeletionPolicy: Retain
    Properties:
      LogGroupName:
        - !Ref "/aws/lambda/${logLambda}"
      RetentionInDays: 1

  logLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.lambda_handler
      Runtime: python3.7
      Role: arn:aws:iam::494526681395:role/for-aws-training
      Code:
        ZipFile: |
          import json
          def lambda_handler(event, context):
              print('log message')
              return 'log message'

  LogAlarm:
    Type: "AWS::CloudWatch::Alarm"
    Properties:
      AlarmName: LogAlarm
      AlarmDescription: Alarm condition
      MetricName: logs
      Namespace: aws-training-hxy
      Statistic: Sum
      Period: "10"
      EvaluationPeriods: "1"
      Threshold: "2"
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        - Ref: SNSTopic